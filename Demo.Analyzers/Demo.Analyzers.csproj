<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFramework>netstandard2.0</TargetFramework>
        <IsPackable>true</IsPackable>
        <Nullable>enable</Nullable>
        <LangVersion>latest</LangVersion>

        <EnforceExtendedAnalyzerRules>true</EnforceExtendedAnalyzerRules>
        <IsRoslynComponent>true</IsRoslynComponent>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="3.3.4">
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>
        <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.3.0"/>
        <PackageReference Include="Microsoft.CodeAnalysis.CSharp.Workspaces" Version="4.3.0"/>
    </ItemGroup>

    <PropertyGroup>
        <PackageId>Demo.Analyzers</PackageId>
        <PackageVersion>1.0.1.0</PackageVersion>
        <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
        <Authors>Chris Bimson</Authors>
        <Description>
            Some simple custom Roslyn analyzers to demostrate using analyzers to prevent anti-patterns in C#.
        </Description>
        <PackageTags>Roslyn;Analyzer</PackageTags>
        <NoPackageAnalysis>true</NoPackageAnalysis>
    </PropertyGroup>

    <ItemGroup>
        <None Include="bin\$(Configuration)\$(TargetFramework)\Demo.Analyzers.dll" Pack="true" 
              PackagePath="analyzers/dotnet/cs" Visible="false"/>
    </ItemGroup>
    
</Project>
